name: Deploy Stg Lambda Laravel Function
on: 
  push:
    branches:
      - 'main'     # excludes the main branch
concurrency:
  group: deploy-stg-app
  cancel-in-progress: true
jobs:
  deploy-stg-app:
    runs-on: ubuntu-latest
    env:
      ROLE_ARN: ${{secrets.ROLE_ARN}}
      APP_NAME: charing
      APP_ENV: stg
      APP_KEY: ${{secrets.APP_KEY_STG}}
      APP_DEBUG: 'true'
      APP_URL: 'https://d3m6ydyv0b0mii.cloudfront.net/'
      LOG_CHANNEL: stack
      LOG_DEPRECATIONS_CHANNEL: 'null'
      LOG_LEVEL: debug
      DB_CONNECTION: mysql
      DB_HOST: ${{secrets.DB_HOST}}
      DB_PORT: ${{secrets.DB_PORT}}
      DB_DATABASE: charing_stg
      DB_USERNAME: ${{secrets.DB_USERNAME}}
      DB_PASSWORD: ${{secrets.DB_PASSWORD}}
      BROADCAST_DRIVER: log
      CACHE_DRIVER: file
      FILESYSTEM_DISK: local
      QUEUE_CONNECTION: sync
      SESSION_DRIVER: file
      SESSION_LIFETIME: 120
      MEMCACHED_HOST: 127.0.0.1
      REDIS_HOST: 127.0.0.1
      REDIS_PASSWORD: 'null'
      REDIS_PORT: 6479
      MAIL_MAILER: smtp
      MAIL_HOST: mailpit
      MAIL_PORT: 1025
      MAIL_USERNAME: 'null'
      MAIL_PASSWORD: 'null'
      MAIL_ENCRYPTION: 'null'
      MAIL_FROM_ADDRESS: 'hello@example.com'
      MAIL_FROM_NAME: 'HelloWorld'
      AWS_DEFAULT_REGION: ap-northeast-1
      AWS_BUCKET: ''
      AWS_USE_PATH_STYLE_ENDPOINT: 'false'
      PUSHER_APP_ID: ''
      PUSHER_APP_KEY: ''
      PUSHER_APP_SECRET: ''
      PUSHER_HOST: ''
      PUSHER_PORT: 443
      PUSHER_SCHEME: https
      PUSHER_APP_CLUSTER: ''
      VITE_PUSHER_APP_KEY: ''
      VITE_PUSHER_HOST: ''
      VITE_PUSHER_PORT: ''
      VITE_PUSHER_SCHEME: ''
      VITE_PUSHER_APP_CLUSTER: ''
      PAGE_MAX_LIMIT: 50
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{env.ROLE_ARN}}
          aws-region: ${{env.AWS_DEFAULT_REGION}}
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 19.x
      - name: Setup Serverless
        run: npm install -g serverless
      - name: Install NodeJS dependencies
        run: npm install
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
      - name: Install PHP dependencies
        run: composer install
      - name: Migrate Database
        run: php artisan migrate
      - name: Severless Deploy
        run: serverless deploy --stage=${{env.APP_ENV}}
