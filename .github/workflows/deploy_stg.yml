name: CI-STG
on: 
  workflow_dispatch: null
  push:
    branches:
      - 'main'
concurrency:
  group: ci-stg
  cancel-in-progress: true
env:
  REGISTRY: ghcr.io
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  SERVER_PORT: 22
  SERVER_USER: ubuntu
  SERVER_SSH_KEY: ${{secrets.SERVER_SSH_KEY}}
  QUEUE_COUNT: 1
  APP_ENV: stg
  APP_PORT: 5000
  DOCKER_COMMON_ENVS: |- 
    -v /mnt/efs/stg-charing-storage/app:/var/www/html/storage/app \
    -v /mnt/efs/stg-charing-storage/logs:/var/www/html/storage/logs \
    -e APP_NAME=Charing-STG \
    -e APP_KEY=${{secrets.APP_KEY_STG}} \
    -e APP_DEBUG=true \
    -e APP_URL=https://test.charing.biz/ \
    -e LOG_CHANNEL=daily \
    -e LOG_DEPRECATIONS_CHANNEL=null \
    -e LOG_LEVEL=debug \
    -e DB_CONNECTION=mysql \
    -e DB_HOST=${{secrets.DB_HOST}} \
    -e DB_PORT=${{secrets.DB_PORT}} \
    -e DB_DATABASE=charing_stg \
    -e DB_USERNAME=${{secrets.DB_USERNAME}} \
    -e DB_PASSWORD=${{secrets.DB_PASSWORD}} \
    -e BROADCAST_DRIVER=log \
    -e CACHE_DRIVER=file \
    -e FILESYSTEM_DISK=local \
    -e QUEUE_CONNECTION=database \
    -e QUEUE_FAILED_DRIVER=null \
    -e SESSION_DRIVER=file \
    -e SESSION_LIFETIME=120 \
    -e MEMCACHED_HOST=127.0.0.1 \
    -e REDIS_HOST=127.0.0.1 \
    -e REDIS_PASSWORD=null \
    -e REDIS_PORT=6479 \
    -e MAIL_MAILER=smtp \
    -e MAIL_HOST=mail2.conoha.ne.jp \
    -e MAIL_PORT=587 \
    -e MAIL_USERNAME=noreply@charing.biz \
    -e MAIL_PASSWORD=iVgOG#R44o \
    -e MAIL_ENCRYPTION=tls \
    -e MAIL_FROM_ADDRESS=noreply@charing.biz \
    -e MAIL_FROM_NAME=Charing-STG \
    -e AWS_DEFAULT_REGION=ap-northeast-1 \
    -e AWS_BUCKET="" \
    -e AWS_USE_PATH_STYLE_ENDPOINT=false \
    -e PUSHER_APP_ID="" \
    -e PUSHER_APP_KEY="" \
    -e PUSHER_APP_SECRET="" \
    -e PUSHER_HOST="" \
    -e PUSHER_PORT=443 \
    -e PUSHER_SCHEME=https \
    -e PUSHER_APP_CLUSTER="" \
    -e VITE_PUSHER_APP_KEY="" \
    -e VITE_PUSHER_HOST="" \
    -e VITE_PUSHER_PORT="" \
    -e VITE_PUSHER_SCHEME="" \
    -e VITE_PUSHER_APP_CLUSTER="" \
    -e PAGE_MAX_LIMIT=200 \
    -e IAM_ARN=${{secrets.IAM_ARN_STG}} \
    -e IAM_ACCESS_KEY=${{secrets.IAM_ACCESS_KEY_STG}} \
    -e IAM_SECRECT_KEY=${{secrets.IAM_SECRECT_KEY_STG}} \
    -e AMAZON_JP_APPLICATION_ID=${{secrets.AMAZON_JP_APPLICATION_ID_STG}} \
    -e AMAZON_JP_CLIENT_ID=${{secrets.AMAZON_JP_CLIENT_ID_STG}} \
    -e AMAZON_JP_CLIENT_SECRET=${{secrets.AMAZON_JP_CLIENT_SECRET_STG}} \
    -e AMAZON_US_APPLICATION_ID=${{secrets.AMAZON_US_APPLICATION_ID_STG}} \
    -e AMAZON_US_CLIENT_ID=${{secrets.AMAZON_US_CLIENT_ID_STG}} \
    -e AMAZON_US_CLIENT_SECRET=${{ secrets.AMAZON_US_CLIENT_SECRET_STG}} \
    -e AMAZON_API_SLEEP_BEFORE_GET_PRODUCT_PRICING=1.0 \
    -e MAX_ASIN_COUNT_PER_FILE=200000
jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/arm64
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker Image
        id: build_docker_image
        uses: docker/build-push-action@v4
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          platforms: ${{ steps.buildx.outputs.platforms }}
          push: true
          tags: ghcr.io/aispel/charing/${{ env.APP_ENV }}-charing:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build Docker Image Retry 1
        if: failure() && steps.build_docker_image.outcome == 'failure'
        id: build_docker_image_retry_1
        uses: docker/build-push-action@v4
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          platforms: ${{ steps.buildx.outputs.platforms }}
          push: true
          tags: ghcr.io/aispel/charing/${{ env.APP_ENV }}-charing:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build Docker Image Retry 2
        if: failure() && steps.build_docker_image_retry_1.outcome == 'failure'
        id: build_docker_image_retry_2
        uses: docker/build-push-action@v4
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          platforms: ${{ steps.buildx.outputs.platforms }}
          push: true
          tags: ghcr.io/aispel/charing/${{ env.APP_ENV }}-charing:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
  deploy-app:
    runs-on: ubuntu-latest
    needs:
      - build-docker-image
    concurrency: deploy-app
    env:
      SERVER_HOST: 54.65.182.103
    steps:
      - name: Pull Docker Image
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          script: |-
            export CR_PAT=${{ secrets.GITHUB_TOKEN }}
            echo $CR_PAT | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
            sudo docker pull ghcr.io/aispel/charing/${{ env.APP_ENV }}-charing:latest
            sudo docker logout ghcr.io
      - name: Run Web Docker
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          script: |-
            if [ -z "$(sudo docker ps -a -q --filter="name=${{ env.APP_ENV }}-")" ]
            then
              echo "no container"
            else
              echo "stop container"
              sudo docker stop $(sudo docker ps -a -q --filter="name=${{ env.APP_ENV }}-")
              echo "remove container"
              sudo docker rm $(sudo docker ps -a -q --filter="name=${{ env.APP_ENV }}-")
            fi

            if ! [ -d /mnt/efs/${{ env.APP_ENV }}-charing-storage/ ]; then mkdir /mnt/efs/${{ env.APP_ENV }}-charing-storage/; fi

            sudo docker run \
              -p ${{ env.APP_PORT }}:80 \
              -d --name ${{ env.APP_ENV }}-charing-web \
              --restart=always \
              -e APP_ENV=${{ env.APP_ENV }} \
              ${{ env.DOCKER_COMMON_ENVS }} \
              ghcr.io/aispel/charing/${{ env.APP_ENV }}-charing:latest \
              /var/www/html/conf/entrypoint.sh
      - name: Pull Docker Image
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          script: |-
            export CR_PAT=${{ secrets.GITHUB_TOKEN }}
            echo $CR_PAT | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
            sudo docker pull ghcr.io/aispel/charing/${{ env.APP_ENV }}-charing:latest
            sudo docker logout ghcr.io
      - name: Run Worker Dockers
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          script: |
            for i in $(seq -f "%03g" 1 19)
            do
              sudo docker run \
                -d --name ${{ env.APP_ENV }}-charing-worker-$i \
                --restart=always \
                -e APP_ENV=${{ env.APP_ENV }} \
                ${{ env.DOCKER_COMMON_ENVS }} \
                ghcr.io/aispel/charing/${{ env.APP_ENV }}-charing:latest \
                php artisan queue:work --queue=update_amazon_jp_exhibit_$i,update_yahoo_jp_exhibit_$i,exhibit_to_amazon_jp_$i,exhibit_to_yahoo_jp_$i,process_asin_file_$i,extract_amazon_info_for_exhibit_$i,extract_amazon_info_$i,update_amazon_info_$i
            done
            for i in $(seq -f "%03g" 100 102)
            do
              sudo docker run \
                -d --name ${{ env.APP_ENV }}-charing-worker-$i \
                --restart=always \
                -e APP_ENV=${{ env.APP_ENV }} \
                ${{ env.DOCKER_COMMON_ENVS }} \
                ghcr.io/aispel/charing/${{ env.APP_ENV }}-charing:latest \
                php artisan queue:work --queue=download_amazon_jp_product_images
            done
      - name: Database Migration
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          script: |
            sudo docker exec $(sudo docker ps -a -q --filter="name=${{ env.APP_ENV }}-charing-web") php artisan migrate
      - name: Remove Untagged Images
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          script: |
            if [[ $(sudo docker images -f "dangling=true" -q) ]]; then
              sudo docker rmi $(sudo docker images -f "dangling=true" -q)
            fi
