name: Deploy Stg Lambda Laravel Function
on: 
  push:
    branches:
      - 'main'
concurrency:
  group: deploy-stg-app
  cancel-in-progress: true
jobs:
  deploy-stg-app:
    runs-on: ubuntu-latest
    env:
      SERVER_HOST: test.charing.biz
      SERVER_PORT: 22
      SERVER_USER: ubuntu
      SERVER_SSH_KEY: ${{secrets.SERVER_SSH_KEY}}
      APP_ENV: stg
      APP_PORT: 5000
      DOCKER_COMMON_ENVS: |- 
        -e APP_NAME=charing \
        -e APP_KEY=${{secrets.APP_KEY_STG}} \
        -e APP_DEBUG=true \
        -e APP_URL=https://test.charing.biz/ \
        -e LOG_CHANNEL=stack \
        -e LOG_DEPRECATIONS_CHANNEL=null \
        -e LOG_LEVEL=debug \
        -e DB_CONNECTION=mysql \
        -e DB_HOST=${{secrets.DB_HOST}} \
        -e DB_PORT=${{secrets.DB_PORT}} \
        -e DB_DATABASE=charing_stg \
        -e DB_USERNAME=${{secrets.DB_USERNAME}} \
        -e DB_PASSWORD=${{secrets.DB_PASSWORD}} \
        -e BROADCAST_DRIVER=log \
        -e CACHE_DRIVER=file \
        -e FILESYSTEM_DISK=local \
        -e QUEUE_CONNECTION=database \
        -e SESSION_DRIVER=file \
        -e SESSION_LIFETIME=120 \
        -e MEMCACHED_HOST=127.0.0.1 \
        -e REDIS_HOST=127.0.0.1 \
        -e REDIS_PASSWORD=null \
        -e REDIS_PORT=6479 \
        -e MAIL_MAILER=smtp \
        -e MAIL_HOST=mailpit \
        -e MAIL_PORT=1025 \
        -e MAIL_USERNAME=null \
        -e MAIL_PASSWORD=null \
        -e MAIL_ENCRYPTION=null \
        -e MAIL_FROM_ADDRESS=hello@example.com \
        -e MAIL_FROM_NAME=HelloWorld \
        -e AWS_DEFAULT_REGION=ap-northeast-1 \
        -e AWS_BUCKET="" \
        -e AWS_USE_PATH_STYLE_ENDPOINT=false \
        -e PUSHER_APP_ID="" \
        -e PUSHER_APP_KEY="" \
        -e PUSHER_APP_SECRET="" \
        -e PUSHER_HOST="" \
        -e PUSHER_PORT=443 \
        -e PUSHER_SCHEME=https \
        -e PUSHER_APP_CLUSTER="" \
        -e VITE_PUSHER_APP_KEY="" \
        -e VITE_PUSHER_HOST="" \
        -e VITE_PUSHER_PORT="" \
        -e VITE_PUSHER_SCHEME="" \
        -e VITE_PUSHER_APP_CLUSTER="" \
        -e PAGE_MAX_LIMIT=50 \
        -e IAM_ARN=${{secrets.IAM_ARN_STG}} \
        -e IAM_ACCESS_KEY=${{secrets.IAM_ACCESS_KEY_STG}} \
        -e IAM_SECRECT_KEY=${{secrets.IAM_SECRECT_KEY_STG}} \
        -e AMAZON_JP_APPLICATION_ID=${{secrets.AMAZON_JP_APPLICATION_ID_STG}} \
        -e AMAZON_JP_CLIENT_ID=${{secrets.AMAZON_JP_CLIENT_ID_STG}} \
        -e AMAZON_JP_CLIENT_SECRET=${{secrets.AMAZON_JP_CLIENT_SECRET_STG}} \
        -e AMAZON_US_APPLICATION_ID=${{secrets.AMAZON_US_APPLICATION_ID_STG}} \
        -e AMAZON_US_CLIENT_ID=${{secrets.AMAZON_US_CLIENT_ID_STG}} \
        -e AMAZON_US_CLIENT_SECRET=${{secrets.AMAZON_US_CLIENT_SECRET_STG}}
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: Remove Source Folder If Exist
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          script: |
            if [ -d /home/ubuntu/${{ env.APP_ENV }}-charing/ ]; then rm -Rf /home/ubuntu/${{ env.APP_ENV }}-charing/; fi
      - name: Upload Source File
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          source: "./,!.github/**,!.git/**,!.gitignore,!.gitmodules,!.vscode/**"
          target: /home/ubuntu/${{ env.APP_ENV }}-charing
      - name: Build Web & Queue Docker
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          script: |-
            cd /home/ubuntu/${{env.APP_ENV}}-charing
            sudo docker build -f DockerfileWeb -t ${{ env.APP_ENV }}-charing-web:latest .
            sudo docker build -f DockerfileQueue -t ${{ env.APP_ENV }}-charing-queue:latest .
      - name: Run Web Docker
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          script: |-
            if [[ $(sudo docker ps -a -q --filter="name=${{ env.APP_ENV }}-charing-web") ]]; then
              sudo docker ps -a -q --filter="name=${{ env.APP_ENV }}-charing-web" | xargs sudo docker stop | xargs sudo docker rm
            fi
            sudo docker run \
              -p ${{ env.APP_PORT }}:8000 \
              -d --name ${{ env.APP_ENV }}-charing-web \
              --restart=always \
              -e APP_ENV=${{ env.APP_ENV }} \
              ${{ env.DOCKER_COMMON_ENVS }} \
              ${{ env.APP_ENV }}-charing-web:latest
      - name: Run Queue Docker
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          script: |
            if [[ $(sudo docker ps -a -q --filter="name=${{ env.APP_ENV }}-charing-queue") ]]; then
              sudo docker ps -a -q --filter="name=${{ env.APP_ENV }}-charing-queue" | xargs sudo docker stop | xargs sudo docker rm
            fi
            sudo docker run \
              -d --name ${{ env.APP_ENV }}-charing-queue \
              --restart=always \
              -e APP_ENV=${{ env.APP_ENV }} \
              ${{ env.DOCKER_COMMON_ENVS }} \
              ${{ env.APP_ENV }}-charing-queue:latest
      - name: Database Migration
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          script: |
            sudo docker exec $(sudo docker ps -a -q --filter="name=${{ env.APP_ENV }}-charing-web") php artisan migrate
      - name: Remove Untagged Images
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_PORT }}
          script: |
            if [[ $(sudo docker images -f "dangling=true" -q) ]]; then
              sudo docker rmi $(sudo docker images -f "dangling=true" -q)
            fi
